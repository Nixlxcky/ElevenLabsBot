import os

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command


from services.elevenlabs import ElevenLabsAPI
from database.database import Database
from keyboards.keyboards import (
    get_language_keyboard,
    get_voice_keyboard,
    get_main_keyboard,
    get_cancel_keyboard
)
from config import ELEVENLABS_API_KEY, API_URL, DATABASE_URL

router = Router()
db = Database(DATABASE_URL)
elevenlabs_api = ElevenLabsAPI(ELEVENLABS_API_KEY, API_URL)


class VoiceStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_audio_file = State()
    waiting_for_voice_name = State()


@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "1. –û–∑–≤—É—á–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (/generate)\n"
        "2. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å (/add_voice)\n"
        "3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–∞ —Å —Ç–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π –≥–æ–ª–æ—Å–æ–≤ (/sync_voices)",
        reply_markup=get_main_keyboard()
    )


@router.message(Command('generate'))
async def generate_command(message: Message):
    voices = await db.get_all_voices()
    if not voices:
        await message.answer(
            "–ì–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É /sync_voices"
        )
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=get_language_keyboard(voices)
    )


@router.message(Command("sync_voices"))
async def sync_voices(message: Message):
    try:
        await message.answer("–ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤...")
        voices = await elevenlabs_api.get_voices()
        await db.clear_voices()

        for voice in voices:
            await db.add_voice(voice)

        await message.answer("‚úÖ –ì–æ–ª–æ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤: {str(e)}")

@router.callback_query(F.data.startswith('page_'))
async def process_page_callback(callback_query: CallbackQuery):
    page = int(callback_query.data.split('_')[1])
    voices = await db.get_all_voices()
    await callback_query.message.edit_reply_markup(
        reply_markup=get_language_keyboard(voices, page)
    )

@router.callback_query(F.data.startswith("lang_"))
async def process_language_selection(callback: CallbackQuery):
    language = callback.data.split("_")[1]
    voices = await db.get_voices_by_language(language)

    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {language}\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å:",
        reply_markup=get_voice_keyboard(voices, language)
    )



@router.callback_query(F.data.startswith("voice_"))
async def process_voice_selection(callback: CallbackQuery, state: FSMContext):
    voice_id = callback.data.split("_")[1]
    await state.update_data(voice_id=voice_id)
    await state.set_state(VoiceStates.waiting_for_text)

    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å.",
        reply_markup=get_cancel_keyboard()
    )
@router.message(VoiceStates.waiting_for_text)
async def process_text(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        audio = await elevenlabs_api.text_to_speech(
            text=message.text,
            voice_id=data['voice_id']
        )

        temp_file = f"temp_audio_{message.from_user.id}.mp3"
        with open(temp_file, "wb") as f:
            f.write(audio)

        await message.answer_audio(
            FSInputFile(temp_file),
            caption="–í–æ—Ç –≤–∞—à–µ –∞—É–¥–∏–æ!"
        )

        os.remove(temp_file)
        await state.clear()

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {str(e)}",
            reply_markup=get_cancel_keyboard()
        )


@router.message(Command("add_voice"))
async def start_add_voice(message: Message, state: FSMContext):
    await state.set_state(VoiceStates.waiting_for_audio_file)
    await message.answer(
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞.\n\n"
        "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: mp3, wav, m4a\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ —á–∏—Å—Ç–æ–π —Ä–µ—á–∏\n"
        "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏ –±–µ–∑ —à—É–º–æ–≤\n"
        "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–æ–ª–æ—Å –±–µ–∑ —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏\n\n"
        "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 1-10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ß–µ—Ç–∫–∞—è —Ä–µ—á—å –±–µ–∑ —Å–∏–ª—å–Ω–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞\n"
        "‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–≤—É–∫–æ–≤",
        reply_markup=get_cancel_keyboard()
    )



@router.message(VoiceStates.waiting_for_audio_file, F.audio | F.document)
async def process_audio_file(message: Message, state: FSMContext):
    try:
        if message.audio:
            file_id = message.audio.file_id
            file_name = message.audio.file_name
            file_size = message.audio.file_size
            duration = message.audio.duration
        elif message.document:
            file_id = message.document.file_id
            file_name = message.document.file_name
            file_size = message.document.file_size
            duration = None
        else:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp3, wav –∏–ª–∏ m4a"
            )
            return

        if not any(file_name.lower().endswith(ext) for ext in ['.mp3', '.wav', '.m4a']):
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ mp3, wav –∏–ª–∏ m4a"
            )
            return

        if file_size > 50 * 1024 * 1024:
            await message.answer(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 50MB"
            )
            return

        if duration and duration < 30:
            await message.answer(
                "‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - 30 —Å–µ–∫—É–Ω–¥"
            )
            return

        await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
        file = await message.bot.get_file(file_id)
        temp_filename = f"temp_voice_{message.from_user.id}{os.path.splitext(file_name)[1]}"
        await message.bot.download_file(file.file_path, temp_filename)

        with open(temp_filename, "rb") as f:
            await state.update_data(voice_file=f.read())

        if os.path.exists(temp_filename):
            os.remove(temp_filename)

        await state.set_state(VoiceStates.waiting_for_voice_name)
        await message.answer(
            "‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ–ª–æ—Å–∞ (–º–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)\n"
            "üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ú—É–∂—Å–∫–æ–π_–≥–æ–ª–æ—Å_RU'",
            reply_markup=get_cancel_keyboard()
        )

    except Exception as e:
        if 'temp_filename' in locals() and os.path.exists(temp_filename):
            os.remove(temp_filename)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        await state.clear()


@router.message(VoiceStates.waiting_for_voice_name)
async def process_voice_name(message: Message, state: FSMContext):
    if len(message.text) > 32:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞.")
        return

    try:
        data = await state.get_data()
        await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞...")

        voice_data = await elevenlabs_api.clone_voice(
            name=message.text,
            files=[data['voice_file']]
        )

        voice_data.update({'gender': 'custom'})
        await db.add_voice(voice_data)

        await message.answer(
            f"‚úÖ –ì–æ–ª–æ—Å '{message.text}' —É—Å–ø–µ—à–Ω–æ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /generate —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≥–æ–ª–æ—Å."
        )
        await state.clear()

    except Exception as e:
        print(e)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–∞:\n{str(e)}\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"
        )
        await state.clear()

@router.callback_query(F.data == "cancel")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    )


@router.callback_query(F.data == "back_to_languages")
async def back_to_languages(callback: CallbackQuery):
    voices = await db.get_all_voices()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=get_language_keyboard(voices)
    )